{
    "contents" : "Лабораторная работа №2\n========================================================\n\nЗадание\n--------------------------------------------------------\n\nОбучить нейронную сеть с помощью генетического алгоритма\n\nХод работы\n--------------------------------------------------------\n\nПодключим необходимые библиотеки\n```{r Library import}\nlibrary(\"rgenoud\")\n```\n\nНапишем функции для работы с нейронной сетью:\n\n1. функция нейрона\n```{r Neuron function}\nneuron <- function(xxInputs, xxWeights)\n{\n  \n  sum = xxWeights[1]\n  \n  for (i in 1:length(xxInputs))\n  {\n    sum=sum+xxWeights[i+1]*xxInputs[i]\n  }\n  \n  return (1/(1+exp(-sum*5)))\n}\n```\n\n2. Функция, реализующая работу нейронной сети робота\n```{r Robot brain function}\nRobot <- function(xxInputs, xxWeights)\n{\n  result = c(0,0,0)\n  len = length(xxWeights)/5\n  for (i in 1:len)\n  {\n    weights = c(xxWeights[(i-1)*5+1],\n                xxWeights[(i-1)*5+2],\n                xxWeights[(i-1)*5+3],\n                xxWeights[(i-1)*5+4],\n                xxWeights[(i-1)*5+5])\n    result[i]=neuron(xxInputs,weights)\n  }\n  return (result)\n}\n```\n\nЗагрузим учебник для нейронной сети\n```{r Neuron network train book}\ndata = read.csv(file=\"neurons_data.csv\",header=TRUE,sep=\";\")\ndata\ninputs = data[,1:4]\noutputs = data[,5:7]\n```\n\nЗапишем фитнес функцию для генетического алгоритма\n```{r Health function}\nf <- function(xx)\n{\n  len = length(xx)/15\n  summ=0\n  \n  inputLen = length(inputs[,1])\n  outputColls = length(outputs[1,])\n  \n  for (inputIndex in 1:inputLen)\n  {\n    input = as.vector(as.matrix(inputs[inputIndex,]))\n    for (i in 1:len)\n    {\n      weights = rep(0,15)\n      for (j in 1:15)\n      {\n        weights[j] = xx[(i-1)*15+j]\n      }\n      \n      output = Robot(xxInputs=input,xxWeights=weights)\n      needOutput = as.vector(as.matrix(outputs[inputIndex,]))\n      \n      for(outputIndex in 1:outputColls)\n      {\n        summ = summ + abs(output[outputIndex] - needOutput[outputIndex])\n      }\n    }\n  }\n  return (summ)\n}\n```\n\nИнициализируем данные для генетического алгоритма\n```{r Genetic algorithm initialization}\nNum = 15*1\ndom = c(-1,1)\nm = matrix(dom,nrow=Num,ncol=2,byrow=TRUE)\n```\n\nЗапустим генетический алгоритм\n```{r Genetic algorithm work}\nres = genoud(fn=f,max.generations=50,nvars=Num,Domains=m,pop.size=1000,boundary.enforcement=2,BFGS=FALSE,P9=0)\n```\n\nПолучим результат\n```{r Genetic algorithm result}\nresultWeights = res$par\nresultWeights\nf(resultWeights)\n```\n\nСравним результат с эталоном 1:\n```{r Result check 1}\ninput = as.vector(as.matrix(inputs[1,]))\nRobot(xxInputs=input,xxWeights=resultWeights)\nas.vector(as.matrix(outputs[1,]))\n```\n\nСравним результат с эталоном 2:\n```{r Result check 2}\ninput = as.vector(as.matrix(inputs[2,]))\nRobot(xxInputs=input,xxWeights=resultWeights)\nas.vector(as.matrix(outputs[2,]))\n```\n\nСравним результат с эталоном 3:\n```{r Result check 3}\ninput = as.vector(as.matrix(inputs[3,]))\nRobot(xxInputs=input,xxWeights=resultWeights)\nas.vector(as.matrix(outputs[3,]))\n```\n\nСравним результат с эталоном 4:\n```{r Result check 4}\ninput = as.vector(as.matrix(inputs[4,]))\nRobot(xxInputs=input,xxWeights=resultWeights)\nas.vector(as.matrix(outputs[4,]))\n```\n\nРезультат работы при отсутсвии искомой батарейки\n```{r Check}\ninput=c(0,0,0,0)\nRobot(xxInputs=input,xxWeights=resultWeights)\n```\n\nРобот поехал за батарейкой вперед :-)",
    "created" : 1397574997925.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "74056412",
    "id" : "9F95CCE9",
    "lastKnownWriteTime" : 1397576360,
    "path" : "~/R/gen/lab3/lab3.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}