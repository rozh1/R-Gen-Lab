{
    "contents" : "Лабораторная работа №4\n========================================================\nЗадание\n--------------------------------------------------------\n\nHaliotis — род моллюсков. Задача заключается в определении возраста особи по различным параметрам.\n\nНадежный способ определения возраста состоит в том, что раковина моллюска разрезается и производится подсчет витков раковины. Другой, менее надежный, но более простой способ состоит в том, чтобы измерить различные параметры особи и по полученным данным попытаться предсказать ее возраст.\n\nС помощью генетического алгоритма найти программу, которая будет определять возраст малюска на основе данных представленных в файле abalone.data\n\nКлассификация перменных\n--------------------------------------------------------\n\nСодержание файла abalone.data\n\n```\nM,0.455,0.365,0.095,0.514,0.2245,0.101,0.15,15\nM,0.35,0.265,0.09,0.2255,0.0995,0.0485,0.07,7\nF,0.53,0.42,0.135,0.677,0.2565,0.1415,0.21,9\nM,0.44,0.365,0.125,0.516,0.2155,0.114,0.155,10\nI,0.33,0.255,0.08,0.205,0.0895,0.0395,0.055,7\nI,0.425,0.3,0.095,0.3515,0.141,0.0775,0.12,8\nF,0.53,0.415,0.15,0.7775,0.237,0.1415,0.33,20\nF,0.545,0.425,0.125,0.768,0.294,0.1495,0.26,16\nM,0.475,0.37,0.125,0.5095,0.2165,0.1125,0.165,9\nF,0.55,0.44,0.15,0.8945,0.3145,0.151,0.32,19\n```\n\nКак видно, первый столбец нуждается в кодировании, т.к. на входе должны быть числа. Значения являются дискретными и никак не свзяны, поэтому кодировать будем по каналам:\n```\nI=0,0,1\nM=0,1,0\nF=1,0,0\n```\n\nВ результате получим файл с данными:\n\n```\n0,1,0,0.455,0.365,0.095,0.514,0.2245,0.101,0.15,15\n0,1,0,0.35,0.265,0.09,0.2255,0.0995,0.0485,0.07,7\n1,0,0,0.53,0.42,0.135,0.677,0.2565,0.1415,0.21,9\n0,1,0,0.44,0.365,0.125,0.516,0.2155,0.114,0.155,10\n0,0,1,0.33,0.255,0.08,0.205,0.0895,0.0395,0.055,7\n0,0,1,0.425,0.3,0.095,0.3515,0.141,0.0775,0.12,8\n1,0,0,0.53,0.415,0.15,0.7775,0.237,0.1415,0.33,20\n1,0,0,0.545,0.425,0.125,0.768,0.294,0.1495,0.26,16\n0,1,0,0.475,0.37,0.125,0.5095,0.2165,0.1125,0.165,9\n1,0,0,0.55,0.44,0.15,0.8945,0.3145,0.151,0.32,19\n```\n\nИмпортируем файл abalone_coded.data в R и посмотрим некоторую статистику\n```{r}\nabalone = read.table(\"abalone_coded.data\",sep=\",\",header=TRUE)\nsummary(abalone)\n```\n\nНормируем столбцы кроме последнего:\n```{r}\nabalone$Length = (abalone$Length - mean(abalone$Length))/sd(abalone$Length)\nabalone$Diameter = (abalone$Diameter - mean(abalone$Diameter))/sd(abalone$Diameter)\nabalone$Height = (abalone$Height - mean(abalone$Height))/sd(abalone$Height)\nabalone$Whole = (abalone$Whole - mean(abalone$Whole))/sd(abalone$Whole)\nabalone$Shucked = (abalone$Shucked - mean(abalone$Shucked))/sd(abalone$Shucked)\nabalone$Viscera = (abalone$Viscera - mean(abalone$Viscera))/sd(abalone$Viscera)\nabalone$Shell = (abalone$Shell - mean(abalone$Shell))/sd(abalone$Shell)\n```\n\nРазделим все данные на обучающие и проверочные:\n```{r}\nlength = length(abalone$F);\n\ntrain.ind = sample(1:length,2*length/3)\ntrain = abalone[train.ind,]\nval = abalone[-train.ind,]\n```\n\nПодключим библиотеку rgd и инициализируем наборы данных\n```{r}\nlibrary(rgp)\n\nfunctionSet1 <- functionSet(\"+\", \"-\", \"*\", \"/\")\ninputVariableSet1 <- inputVariableSet(\"F\",\"M\",\"I\",\"Length\",\"Diameter\",\"Height\",\"Whole\",\"Shucked\",\"Viscera\",\"Shell\")\nconstantFactorySet1 <- constantFactorySet(function() rnorm(1))\n```\n\nСоздадим переменные для обучения с ранним остановом:\n```{r}\nlastError = 10000000\nbestFunction = function(){}\n```\n\nСоставим фитнес-функцию:\n```{r}\nfitnessFunction1 = function(f){\n   t = f(train[,1],train[,2],train[,3],train[,4],train[,5],train[,6],train[,7],train[,8],train[,9],train[,10])\n   diff = sum((train[,11]-t)^2)\n   if (is.na(diff)) {\n     diff = 10000000\n   }\n   tmp = f(val[,1],val[,2],val[,3],val[,4],val[,5],val[,6],val[,7],val[,8],val[,9],val[,10])\n   error = mean(abs(tmp - val[,11]))\n   if (!is.na(error))\n   {\n     if (error<lastError) \n     {\n       lastError <<- error\n       bestFunction <<- f\n     }\n   }\n   return(diff)\n}\n```\n\nЗапустим алгоритм генетического программирования\n```{r GeneticProgramming}\ngpResult1 <- geneticProgramming(functionSet=functionSet1,\n                                inputVariables=inputVariableSet1,\n                                constantSet=constantFactorySet1,\n                                fitnessFunction=fitnessFunction1,\n                                populationSize=1000,\n                                stopCondition=makeStepsStopCondition(3000))\n```\n\nЛучший результат достигнут программой:\n```{r}\nprint(gpResult1$elite[1])\n```\n\nПроверим программу на тестовом множестве:\n```{r}\nbest1 <- gpResult1$population[[which.min(sapply(gpResult1$population, fitnessFunction1))]]\nbest1Compute = best1(val[,1],val[,2],val[,3],val[,4],val[,5],val[,6],val[,7],val[,8],val[,9],val[,10])\nmeanError = mean(abs(best1Compute - val[,11]))\nmeanError\n```\n\nПервые 10 результатов:\n```{r}\nbest1Compute[1:10]\nval[1:10,11]\n```\n\nЛучшая функция по результатам обучения с ранним остановом:\n```{r}\nprint(bestFunction)\n```\n\nСредняя ошибка:\n```{r}\nlastError\n```\n\nПервые 10 результатов:\n```{r}\nbest2Compute = bestFunction(val[,1],val[,2],val[,3],val[,4],val[,5],val[,6],val[,7],val[,8],val[,9],val[,10])\nbest2Compute[1:10]\nval[1:10,11]\n```\n",
    "created" : 1400412329769.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2826982067",
    "id" : "130E944A",
    "lastKnownWriteTime" : 1400781154,
    "path" : "~/R/gen/lab4/lab4.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}