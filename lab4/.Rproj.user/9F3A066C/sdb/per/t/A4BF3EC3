{
    "contents" : "library(rgp)\n\nabalone = read.table(\"abalone_coded.data\",sep=\",\",header=TRUE)\nsummary(abalone)\n\nabalone$Length = (abalone$Length - mean(abalone$Length))/sd(abalone$Length)\nabalone$Diameter = (abalone$Diameter - mean(abalone$Diameter))/sd(abalone$Diameter)\nabalone$Height = (abalone$Height - mean(abalone$Height))/sd(abalone$Height)\nabalone$Whole = (abalone$Whole - mean(abalone$Whole))/sd(abalone$Whole)\nabalone$Shucked = (abalone$Shucked - mean(abalone$Shucked))/sd(abalone$Shucked)\nabalone$Viscera = (abalone$Viscera - mean(abalone$Viscera))/sd(abalone$Viscera)\nabalone$Shell = (abalone$Shell - mean(abalone$Shell))/sd(abalone$Shell)\n#abalone$Rings = (abalone$Rings - min(abalone$Rings))/(max(abalone$Rings) - min(abalone$Rings))\n\nfunctionSet1 <- functionSet(\"+\", \"-\", \"*\", \"/\")\ninputVariableSet1 <- inputVariableSet(\"F\",\"M\",\"I\",\"Length\",\"Diameter\",\"Height\",\"Whole\",\"Shucked\",\"Viscera\",\"Shell\")\nconstantFactorySet1 <- constantFactorySet(function() rnorm(1))\n\nlength = length(abalone$F);\n\ntrain.ind = sample(1:length,2*length/3)\ntrain = abalone[train.ind,]\nval = abalone[-train.ind,]\n\nlastError = 10000000\n\nbestFunction = function(){}\n\n\nfitnessFunction1 = function(f){\n   t = f(train[,1],train[,2],train[,3],train[,4],train[,5],train[,6],train[,7],train[,8],train[,9],train[,10])\n   diff = sum((abs(train[,11]-t))^2)\n   if (is.na(diff)) {\n     diff = 10000000\n   }\n   \n   tmp = f(val[,1],val[,2],val[,3],val[,4],val[,5],val[,6],val[,7],val[,8],val[,9],val[,10])\n   \n   error = mean(abs(tmp - val[,11]))\n   if (!is.na(error))\n   {\n     if (error<lastError) \n     {\n       lastError <<- error\n       bestFunction <<- f\n     }\n   }\n   return(diff)\n}\n\ngpResult1 <- geneticProgramming(functionSet=functionSet1,\n                                inputVariables=inputVariableSet1,\n                                constantSet=constantFactorySet1,\n                                fitnessFunction=fitnessFunction1,\n                                populationSize=100,\n                                eliteSize=15,\n                                stopCondition=makeStepsStopCondition(300))\n\nprint(gpResult1$elite[1])\n\nbest1 <- gpResult1$population[[which.min(sapply(gpResult1$population, fitnessFunction1))]]\n\nbest1Compute = best1(val[,1],val[,2],val[,3],val[,4],val[,5],val[,6],val[,7],val[,8],val[,9],val[,10])\nmean(abs(best1Compute - val[,11]))\n\nbest1Compute[1:10]\nval[1:10,11]\n\nprint(bestFunction)\n\nlastError\n\nbest2Compute = bestFunction(val[,1],val[,2],val[,3],val[,4],val[,5],val[,6],val[,7],val[,8],val[,9],val[,10])\nbest2Compute[1:10]\nval[1:10,11]",
    "created" : 1399993854502.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1611964676",
    "id" : "A4BF3EC3",
    "lastKnownWriteTime" : 1400780689,
    "path" : "~/R/gen/lab4/lab4.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}